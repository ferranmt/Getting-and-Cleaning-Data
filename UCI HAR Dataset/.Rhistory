unlink("testdir2", recursive=TRUE)
setwd<-old.dir
setwd(old.dir)
unlink("testdir", recursive=TRUE)
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,replace=FALSE)
sample(1:20, 10, replace=FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1), 100, replace=TRUE, prob=c(0.3,0.7))
flips<- sample(c(0,1), 100, replace=TRUE, prob=c(0.3,0.7))
flips
sum()
sum(flips)
?rbinnom()
?rbinom
rbinom(1, size=100, prob=0.7)
flips2<-
f
flips2<-sample(0:1)
flips2<-rbinom(1,100,prob=0.7)
flips2<-rbinom(100,prob=0.7)
flips2<-rbinom(size=1, n= 100,prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(100,25)
rnorm(10, 100,25)
?rpois
rpois(5,10)
my_pois<-replicate(100,rpois(5,10))
my_pois
cm<-colmeans(my_pois)
cm<-colMeans(my_pois)
hist(cm)
ls()
class(plants)
q()
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
1:20
pi:10
15:1
?`:`
seq(1:20)
seq(1,20)
seq(0,10,by=0.5)
seq(5.10.length=30)
seq(5,10,length=30)
myseq<-seq(5,10,length=30)
myseq<-seq(5, 10, length=30)
my_seq<-seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
sep(0,times=40)
rep(0,times=40)
rep(c(0,1,2))
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
library()
library(swirl)
swirl()
mydf<-(read.csv(path2csv)
stringsAsFactors=False
mydf<-(read.csv(path2csv), stringsAsFactors=FALSE)
mydf<-(read.csv(path2csv) stringsAsFactors=FALSE)
?READ.CSV
?read.csv
mydf<-read.csv(path2csv, stringsAsFactors=FALSE)
View(mydf)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(-(X:size))
select(cran,-(X:size))
filter(cran,package=="swirl")
filter(cran,r_version=="3.1.1", country=="US")
?Comparison
filter(cran,r_version<="3.0.2", country=="IN")
filter(cran, country=="US"|country=="IN")
filter(cran, size>100500, r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, r_version!is.na())
filter(cran, r_version == !is.na())
filter(cran, r_version == !is.na
)
filter(cran, r_version  !is.na())
filter(cran, !is.na(r_version))
cran2<-select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3<-select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size-1000)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg:bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
library(swirl)
swirl()
mydf<-read.csv(path2csv, stringsAsFactors=FALSE)
dim()
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:rarch)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
skip()
skio()
skip()
filter()
skip()
is.na(c(3,4,NA,19))
is.na(c(3,4,NA,10))
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
skip()
skip()
skip()
skip()
skip()
skip()
skip()
cran3
mutate(cran3, size_mb = size/2^20)
skip()
skip()
play()
cran
cran3
nxt()
summarize(cran, avg_bytes = mean(size))
swirl()
library("swirl")
swirl()
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package<-group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
submit()
pack_sum
quantile(pack_sum$count, probs=0.99)
top_counts<-filter(pack_sum, count>679)
top_counts
View(top_counts)
View(top_counts)
arrange(top_counts, desc(count))
top_counts_sorted<-arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$count, probs=0.99)
quantile(pack_sum$unique, probs=0.99)
filter(pack_sum, unique>465)
top_unique<-filter(pack_sum, unique>465)
View(top_unique)
arrange(top_unique, desc(unique))
top_unique_sortedarrange(top_unique, desc(unique))
top_unique_sorted<-arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
reset()
submit()
submit()
submit()
submit()
submit()
reset()
submit()
library("swirl")
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
gather(students2, sex_class, count, -grade )
res<-gather(students2, sex_class, count, -grade)
res
?separate()
?separate
separate(res, sex_class, c("sex, "class"))
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
submit()
submit()
submit()
reset()
submit()
submit()
submit()
submit()
submit()
skip()
?spread
submit()
submit()
submit()
extract_numeric("class5")
submit()
submit(9)
submit()
reset()
submit()
submit()
submit()
reset()
submit()
skip()
quit()
library("swirl")
swirl()
library(tidyr)
students
gather(students)
?gather
gather(students, sex, count, -grade)
students2
gather(students2, sex_class, count)
gather(students2, sex_class, count, -grade)
res<-gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
?spread
submit()
extract_numeric("class5")
submit()
submit()
students4
submit()
View(student_info)
submit()
submit()
submit()
reset()
submit()
passed
failed
mutate(passed, status = "passed")
passed<-passed%>%mutate (status = "passed")
failed<-failed%>%mutate(status = "failed")
packageVersion('dplyr')
bind_rows(passed, failed)
sat
?separate
submit()
skip()
submit()
library(xlsx)
library("xlsx")
getdata.data.DATA.gov_NGAP <- read.csv("C:/Users/ftorrent/Desktop/getdata-data-DATA.gov_NGAP.csv")
View(getdata.data.DATA.gov_NGAP)
View(getdata.data.DATA.gov_NGAP)
clean <- read.csv("C:/Users/ftorrent/Desktop/clean.csv")
View(clean)
dat<-clean
rm(clean)
View(getdata.data.DATA.gov_NGAP)
rm(getdata.data.DATA.gov_NGAP)
sum(dat$Zip*dat$Ext,na.rm=T)
library("XML")
fileurl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc<-xmlTreeParse(fileurl, useinternal=TRUE)
doc<-xmlTreeParse(fileurl, useInternal=TRUE)
rootNode<-xmlRoot(doc)
doc<-xmlTreeParse(fileurl)
fileurl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml" https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml
fileUrl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
rm(fileurl)
doc<-xmlTreeParse(fileUrl, useInternal= TRUE)
rm(fileUrl)
download.file(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml )
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", .../Desktop)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", .../Desktop/)
fileUrl<-"http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc<-xmlTreeParse(fileUrl, useInternal= TRUE)
doc
doc<-xmlTreeParse(fileUrl, useInternal=TRUE)
doc
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode
rootNode[[1]]
rootNode[[1]][[1]]
xmlSApply(rootNode, xmlzipcode)
xmlSApply(rootNode, zipcode)
xmlSApply(rootNode, "zipcode")
xpathSApply(rootNode, "//zipcode", xmlValue)
zipcodes<-xpathSApply(rootNode, "//zipcode", xmlValue)
zipcodestable<-as.data.frame(zipcodes)
View(zipcodestable)
filter(zipcodestable, zipcodes==21231)
filter(zipcodestable, zipcodes==21231)
head(filter(zipcodestable, zipcodes==21231))
zipcodesmatrix<-as.matrix(zipcodes)
View(zipcodesmatrix)
head(filter(zipcodesmatrix, zipcodes==21231))
filter(zipcodesmatrix)
filter(zipcodesmatrix, zipcodes == 21231)
zipcodestable
View(zipcodestable)
data<-tbl_df(zipcodestable)
?tbl_df
??tbl_df
data<-tbl_df("zipcodestable")
zipcodestable(head, 337)
head(zipcodestable, 337)
question5 <- read.csv("C:/Users/ftorrent/Desktop/question5.csv")
View(question5)
fread(question5)
library(data.table)
library("data.table")
package("data.table")
install.packages("data.table")
library(data.table)
library(dplyr)
question5 <- read.csv("C:/Users/ftorrent/Desktop/question5.csv")
View(question5)
fread()
fread(question5)
fread(dt)
fread(DT)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
DT<-fread(question5)
DT<-fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
DT[,mean(pwgtp15),by=SEX]
mean(DT$pwgtp15,by=DT$SEX)
sapply(split(DT$pwgtp15,DT$SEX),mean)
tapply(DT$pwgtp15,DT$SEX,mean)
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
system.time<-(DT[,mean(pwgtp15),by=SEX])
View(system.time)
system.time()
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(replicate(10000,DT[,mean(pwgtp15),by=SEX]))
system.time(replicate(10,DT[,mean(pwgtp15),by=SEX]))
system.time(replicate(90,DT[,mean(pwgtp15),by=SEX]))
system.time(replicate(150,DT[,mean(pwgtp15),by=SEX]))
system.time(replicate(150,mean(DT$pwgtp15,by=DT$SEX)))
system.time(replicate(150,sapply(split(DT$pwgtp15,DT$SEX),mean)))
system.time(replicate(150,tapply(DT$pwgtp15,DT$SEX,mean)))
system.time(replicate(150,mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)))
system.time(replicate(150,mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(replicate(150,mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
library("XLS")
library(xls)
library(XLS)
library(xlsx)
?xlsx
??xlsx
recsystems <- read.csv("C:/Users/ftorrent/Desktop/recsystems.csv")
View(recsystems)
correlations<-c(0.476683281,   0.464110148,	0.438991554,	0.400274504,	0.379856265
)
correlations
library(dplyr)
recsys<-tbl_df(recsystems)
recsys
rm(recsystems)
View(recsys)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 1:10
if(x > 5) {
x <- 1
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-4
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
library(datasets)
data(iris)
?iris
data(iris)
iris
mean(iris$$Virginica)
mean(iris$Virginica)
mean(iris$virginica)
View(iris)
mean(iris$species)
split(iris$species, iris$Sepal.Length)
split(iris$species, iris$Sepal.Length)
library(dplyr)
virgi<-filter(iris, Species==virginica)
virgi<-filter(iris, Species=="virginica")
virgi
mean(virgi$Sepal.Width)
mean(virgi$Sepal.Length)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris, 2, mean)
library(datasets)
data(mtcars)
?mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
#Setting the working directory:
setwd("C:/Users/ftorrent/Desktop/Getting and Cleaning Data Course Work/UCI HAR Dataset")
#1. We merge the data:
#Read x_train dataset
trainData <- read.table("./train/X_train.txt")
